import random
import hashlib
import time

def generate_hash(message, timestamp):
    """Generate a hash of the original message and timestamp using SHA-256."""
    combined_message = f"{message}{timestamp}"
    hash_object = hashlib.sha256(combined_message.encode())
    return hash_object.hexdigest()

def generate_space_replacements():
    """Return a list of unique characters for space replacement."""
    return ['␣', '•', '◦']

def encrypt(message):
    """Encrypt the message using a complex algorithm with randomization."""
    timestamp = str(int(time.time() * 1000)) 

    # Generate the hash for the original message, incorporating the timestamp
    hash_value = generate_hash(message, timestamp)

    # Seed the random number generator with the current timestamp to introduce randomness
    random.seed(int(timestamp))

    # Calculate a shift value based on the hash
    shift_value = sum(ord(c) for c in hash_value) % 26  # Shift based on the hash characters

    # Get space replacements
    space_replacements = generate_space_replacements()

    encrypted_message = ''

    for char in message:
        if char.isalpha():
            if char.islower():
                shift = (ord(char) - ord('a') + shift_value) % 26 + ord('a')
            else:
                shift = (ord(char) - ord('A') + shift_value) % 26 + ord('A')
            encrypted_message += chr(shift)
        elif char.isdigit():
            # Shift digits (0-9)
            shift = (ord(char) - ord('0') + shift_value) % 10 + ord('0')
            encrypted_message += chr(shift)
        elif char == ' ':
            # Replace space with a random unique character from space replacements
            encrypted_message += random.choice(space_replacements)
        else:
            encrypted_message += char  # Leave other special characters unchanged

    return encrypted_message, hash_value  # Return the encrypted message and hash

def decrypt(encrypted_message, hash_value):
    """Decrypt the message using the hash and reverse the encryption process."""
    # Calculate the shift value based on the provided hash
    shift_value = sum(ord(c) for c in hash_value) % 26  # Same shift calculation as in encryption

    decrypted_message = ''
    space_replacements = generate_space_replacements()

    for char in encrypted_message:
        if char.isalpha():
            if char.islower():
                shift = (ord(char) - ord('a') - shift_value) % 26 + ord('a')
            else:
                shift = (ord(char) - ord('A') - shift_value) % 26 + ord('A')
            decrypted_message += chr(shift)
        elif char.isdigit():
            # Reverse the digit shift during decryption
            shift = (ord(char) - ord('0') - shift_value) % 10 + ord('0')
            decrypted_message += chr(shift)
        elif char in space_replacements:  # Check for space replacements
            decrypted_message += ' '  # Convert the unique character back to space
        else:
            decrypted_message += char  # Leave other characters unchanged

    return decrypted_message  # Return the decrypted message

if __name__ == "__main__":
    action = input("Do you want to encrypt or decrypt a message? (e/d): ").strip().lower()

    if action == 'e':
        message = input("Enter a message to encrypt: ")
        encrypted_message, hash_value = encrypt(message)
        print("Encrypted message:", encrypted_message)
        print("Hash of the original message (store securely for decryption):", hash_value)

    elif action == 'd':
        encrypted_message = input("Enter the encrypted message: ")
        hash_value = input("Enter the hash of the original message: ")
        decrypted_message = decrypt(encrypted_message, hash_value)
        if decrypted_message:
            print("Decrypted message:", decrypted_message)
        else:
            print("Decryption failed! Invalid encrypted message or hash.")
